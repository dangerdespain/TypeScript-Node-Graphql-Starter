input _idOperatorsFilterFindManyUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

scalar Date

input EmailOperatorsFilterFindManyUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input FilterFindManyUserInput {
  email: String
  password: String
  passwordResetToken: String
  passwordResetExpires: Date
  facebook: String
  twitter: String
  google: String
  tokens: [JSON]
  profile: UserProfileInput
  _id: MongoID
  updatedAt: Date
  createdAt: Date
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterFindManyUserInput
  OR: [FilterFindManyUserInput!]
  AND: [FilterFindManyUserInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `ID` scalar type represents a unique MongoDB identifier in collection.
MongoDB by default use 12-byte ObjectId value
(https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB
also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterFindManyUserInput {
  email: EmailOperatorsFilterFindManyUserInput
  _id: _idOperatorsFilterFindManyUserInput
}

type Query {
  userMany(
    """Filter by fields"""
    filter: FilterFindManyUserInput
    skip: Int
    limit: Int = 1000
    sort: SortFindManyUserInput
  ): [User]
}

enum SortFindManyUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

type User {
  email: String
  password: String
  passwordResetToken: String
  passwordResetExpires: Date
  facebook: String
  twitter: String
  google: String
  tokens: [JSON]
  profile: UserProfile
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
  notice: String

  """Array of notices"""
  noticeList: [String]
}

type UserProfile {
  name: String
  gender: String
  location: String
  website: String
  picture: String
}

input UserProfileInput {
  name: String
  gender: String
  location: String
  website: String
  picture: String
}
